{"version":3,"sources":["Utils.js","Form.js","EntityViewer.js","App.js","serviceWorker.js","index.js"],"names":["isURL","t","regex","RegExp","match","getUSDZ","price","reg","suffix","replace","getGithubRawURL","Form","props","usdzField","className","type","id","placeholder","onChange","onUsdzFieldChange","onSubmit","for","aria-describedby","value","onUsdzCheckboxChange","enableUsdzField","disabled","url","EntityViewer","content","src","auto-rotate","camera-controls","ar","ar-scale","alt","ios-src","usdz","App","useState","model","setModel","submittedModel","setSubmittedModel","React","setUsdz","submittedUsdz","setSubmittedUsdz","setEnableUsdzField","evt","target","m","preventDefault","checked","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oMAAaA,EAAQ,SAACC,GAClB,IACMC,EAAQ,IAAIC,OADC,yFAGnB,OAAOF,EAAEG,MAAMF,IAGNG,EAAU,SAACJ,GAAsB,IAAnBK,EAAkB,wDACnCC,EAAM,kBACNC,EAASF,EAAQ,+HAAiI,GACxJ,OAAOL,EAAEQ,QAAQF,EAAV,eAAuBC,KAGrBE,EAAkB,SAACT,GAG5B,OADAA,GADAA,EAAIA,EAAEQ,QAAQ,aAAc,8BACtBA,QAAQ,SAAU,MCebE,EA3BF,SAACC,GAEV,IAAMC,EACF,yBAAKC,UAAU,mBACX,2BAAOC,KAAK,MAAMD,UAAU,eAAeE,GAAG,UAAUC,YAAY,kCAAkCC,SAAUN,EAAMO,qBAG9H,OACI,0BAAMC,SAAUR,EAAMQ,UACtB,yBAAKN,UAAU,cACX,2BAAOO,IAAI,YAAX,aACA,2BAAON,KAAK,MAAMD,UAAU,eAAeE,GAAG,WAAWM,mBAAiB,eAAeL,YAAY,yCAAyCC,SAAUN,EAAMM,WAC9J,2BAAOF,GAAG,eAAeF,UAAU,wBAAnC,4EAEJ,yBAAKA,UAAU,cACX,2BAAOA,UAAU,mBAAmBC,KAAK,WAAWC,GAAG,eAAeO,MAAM,eAAeL,SAAUN,EAAMY,uBAC3G,2BAAOV,UAAU,mBAAmBO,IAAI,gBAAxC,0BAGAT,EAAMa,iBACNZ,EAEJ,4BAAQE,KAAK,SAASD,UAAU,uBAAuBY,UAAW1B,EAAMY,EAAMe,MAA9E,YCJOC,G,MAjBM,SAAChB,GAClB,IAAMiB,EACF,6BACI,sCACA,kCAAcC,IAAG,UAAKlB,EAAMe,KAAOI,eAAA,EAAYC,mBAAA,EAAgBC,IAAE,EAACC,WAAS,OAAOC,IAAI,QAAQC,UAAA,UAAYxB,EAAMyB,SAGxH,OACI,6BAEIrC,EAAMY,EAAMe,MACRE,KCiCDS,MAzCf,WAAgB,IAAD,EACaC,mBAAS,QADtB,mBACNC,EADM,KACCC,EADD,OAE+BF,mBAAS,QAFxC,mBAENG,EAFM,KAEUC,EAFV,OAGWC,IAAML,SAAS,QAH1B,mBAGNF,EAHM,KAGAQ,EAHA,OAI6BN,mBAAS,QAJtC,mBAINO,EAJM,KAISC,EAJT,OAKiCR,oBAAS,GAL1C,mBAKNd,EALM,KAKWuB,EALX,KAgCb,OACE,yBAAKlC,UAAU,iBACb,qDACA,kBAAC,EAAD,CAAMI,SAxBW,SAAC+B,GACpBR,EAAS,GAAD,OAAIQ,EAAIC,OAAO3B,SAuBSI,IAAKa,EAAOpB,SAhBzB,SAAC6B,GAEpB,IAAME,EAAIzC,EAAgB8B,GAC1BG,EAAkBQ,GACd1B,GAAmBzB,EAAMqC,GAE3BU,EAAiB,GAAD,OAAI1C,EAAQK,EAAgB2B,MAE5CU,EAAiB,GAAD,OAAI1C,EAAQ8C,KAE9BF,EAAIG,kBAMgE5B,qBA5BrC,SAACyB,GAChCD,EAAmBC,EAAIC,OAAOG,UA2BsF5B,gBAAiBA,EAAiBN,kBApB1H,SAAC8B,GAC7BJ,EAAQ,GAAD,OAAII,EAAIC,OAAO3B,WAoBpB,kBAAC,EAAD,CAAcI,IAAKe,EAAgBL,KAAMS,MC/B3BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrD,MACvB,2D,MCXNsD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8ccf21ac.chunk.js","sourcesContent":["export const isURL = (t) => {\n    const expression = /[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)?/gi;\n    const regex = new RegExp(expression);\n\n    return t.match(regex);\n}\n\nexport const getUSDZ = (t, price = false) => {\n    const reg = /\\.(gltf|glb)$/gi;\n    const suffix = price ? \"#applePayButtonType=buy&checkoutTitle=Biplane%20Toy&checkoutSubtitle=Rustic%20finish%20with%20rotating%20propeller&price=$15\" : \"\";\n    return t.replace(reg, `.usdz${suffix}`);\n}\n  \nexport const getGithubRawURL = (t) => {\n    t = t.replace(\"github.com\", \"raw.githubusercontent.com\");\n    t = t.replace(\"/blob/\", \"/\");\n    return t;\n}","import React from 'react';\nimport { isURL } from './Utils';\n\nconst Form = (props) => {\n  \n    const usdzField = (\n        <div className=\"form-group mt-2\">\n            <input type=\"url\" className=\"form-control\" id=\"usdzURL\" placeholder=\"Enter the link to the usdz file\" onChange={props.onUsdzFieldChange} />\n        </div>\n    );\n    return (\n        <form onSubmit={props.onSubmit}>\n        <div className=\"form-group\">\n            <label for=\"modelURL\">Model URL</label>\n            <input type=\"url\" className=\"form-control\" id=\"modelURL\" aria-describedby=\"modelURLHint\" placeholder=\"Enter the link to the glb or glTF file\" onChange={props.onChange} />\n            <small id=\"modelURLHint\" className=\"form-text text-muted\">Upload your model file to github project and copy the link to the file.</small>\n        </div>\n        <div className=\"form-check\">\n            <input className=\"form-check-input\" type=\"checkbox\" id=\"usdzCheckbox\" value=\"usdzCheckbox\" onChange={props.onUsdzCheckboxChange} />\n            <label className=\"form-check-label\" for=\"usdzCheckbox\">Specify USDZ location</label>\n        </div>\n        {\n            props.enableUsdzField &&\n            usdzField\n        }\n        <button type=\"submit\" className=\"btn btn-warning mt-3\" disabled={!isURL(props.url)}>Submit</button>\n        </form>\n    )\n};\n\nexport default Form;","import React from 'react';\nimport { isURL } from './Utils';\nimport '@google/model-viewer/dist/model-viewer';\n\nconst EntityViewer = (props) => {\n    const content = (\n        <div>\n            <h2>Entity</h2>\n            <model-viewer src={`${props.url}`} auto-rotate camera-controls ar ar-scale=\"auto\" alt=\"model\" ios-src={`${props.usdz}`} />\n        </div>\n    );\n    return (\n        <div>\n        {\n            isURL(props.url) &&\n                content\n        }\n        </div>\n    );\n};\n\nexport default EntityViewer;","import React, { useState } from 'react';\nimport { isURL, getUSDZ, getGithubRawURL } from './Utils';\nimport Form from './Form';\nimport EntityViewer from './EntityViewer';\n//import logo from './logo.svg';\n//import './App.css';\n\nfunction App() {\n  const [model, setModel] = useState(\"null\");\n  const [submittedModel, setSubmittedModel] = useState(\"null\");\n  const [usdz, setUsdz] = React.useState(\"null\");\n  const [submittedUsdz, setSubmittedUsdz] = useState(\"null\");\n  const [enableUsdzField, setEnableUsdzField] = useState(false);\n\n  const handleUsdzCheckboxChange = (evt) => {\n    setEnableUsdzField(evt.target.checked);\n  }\n  \n  const handleChange = (evt) => {\n    setModel(`${evt.target.value}`);\n  }\n  \n  const handleUsdzFieldChange = (evt) => {\n    setUsdz(`${evt.target.value}`);\n  }\n  \n  const handleSubmit = (evt) => {\n    // handle submit\n    const m = getGithubRawURL(model);\n    setSubmittedModel(m);\n    if (enableUsdzField && isURL(usdz)) {\n      // use specified usdz location\n      setSubmittedUsdz(`${getUSDZ(getGithubRawURL(usdz))}`);\n    } else {\n      setSubmittedUsdz(`${getUSDZ(m)}`);\n    }\n    evt.preventDefault();\n  }\n\n  return (\n    <div className=\"App container\">\n      <h1>Android AR Quick Look</h1>\n      <Form onChange={handleChange} url={model} onSubmit={handleSubmit} onUsdzCheckboxChange={handleUsdzCheckboxChange} enableUsdzField={enableUsdzField} onUsdzFieldChange={handleUsdzFieldChange} />\n      <EntityViewer url={submittedModel} usdz={submittedUsdz} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}