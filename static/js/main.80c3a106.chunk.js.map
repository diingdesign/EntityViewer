{"version":3,"sources":["Utils.js","Form.js","EntityViewer.js","App.js","Footer.js","serviceWorker.js","index.js"],"names":["isURL","t","regex","RegExp","match","getUSDZ","isRealityFile","price","console","log","reg","suffix","replace","getGithubRawURL","getParameterByName","name","url","window","location","href","results","exec","decodeURIComponent","Form","props","usdzField","className","type","id","placeholder","onChange","onUsdzFieldChange","onSubmit","for","value","aria-describedby","onRealityCheckboxChange","checked","onUsdzCheckboxChange","enableUsdzField","disabled","EntityViewer","modelViewerRef","useRef","useState","loadError","setLoadError","useEffect","undefined","current","addEventListener","evt","content","class","role","ref","src","auto-rotate","camera-controls","ar","ar-scale","alt","ios-src","usdz","App","para","paraIsRealityFile","model","setModel","submittedModel","setSubmittedModel","React","setUsdz","submittedUsdz","setSubmittedUsdz","setIsRealityFile","setEnableUsdzField","target","m","origin","pathname","preventDefault","event","Footer","Date","getFullYear","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.80c3a106.chunk.js","sourcesContent":["export const isURL = (t) => {\n    const expression = /[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)?/gi;\n    const regex = new RegExp(expression);\n\n    return t.match(regex);\n}\n\nexport const getUSDZ = (t, isRealityFile = false, price = false) => {\n    console.log(\"isRealityFile\", isRealityFile);\n    const reg = /\\.(gltf|glb)$/gi;\n    const suffix = price ? \"#applePayButtonType=buy&checkoutTitle=Biplane%20Toy&checkoutSubtitle=Rustic%20finish%20with%20rotating%20propeller&price=$15\" : \"\";\n    return t.replace(reg, isRealityFile ? `.reality${suffix}` : `.usdz${suffix}`);\n}\n  \nexport const getGithubRawURL = (t) => {\n    t = t.replace(\"github.com\", \"raw.githubusercontent.com\");\n    t = t.replace(\"/blob/\", \"/\");\n    return t;\n}\n\nexport const getParameterByName = (name, url) => {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}","import React from 'react';\nimport { isURL } from './Utils';\n\nconst Form = (props) => {\n  \n    const usdzField = (\n        <div className=\"form-group mt-2\">\n            <input type=\"url\" className=\"form-control\" id=\"usdzURL\" placeholder=\"Enter the link to the usdz file\" onChange={props.onUsdzFieldChange} />\n        </div>\n    );\n    return (\n        <form onSubmit={props.onSubmit}>\n        <div className=\"form-group\">\n            <label for=\"modelURL\">Model URL</label>\n            <input type=\"url\" value={(props.url === \"null\") ? \"\" : props.url} className=\"form-control\" id=\"modelURL\" aria-describedby=\"modelURLHint\" placeholder=\"Enter the link to the glb or glTF file\" onChange={props.onChange} />\n            <small id=\"modelURLHint\" className=\"form-text text-muted\">Upload your model file to github project and copy the link to the file.</small>\n        </div>\n        <div className=\"form-check\">\n            <input className=\"form-check-input\" type=\"checkbox\" id=\"realityCheckbox\" value=\"realityCheckbox\" onChange={props.onRealityCheckboxChange} checked={props.isRealityFile}/>\n            <label className=\"form-check-label\" for=\"realityCheckbox\">Reality file?</label>\n        </div>\n        <div className=\"form-check\">\n            <input className=\"form-check-input\" type=\"checkbox\" id=\"usdzCheckbox\" value=\"usdzCheckbox\" onChange={props.onUsdzCheckboxChange} />\n            <label className=\"form-check-label\" for=\"usdzCheckbox\">Specify a USDZ location</label>\n        </div>\n        {\n            props.enableUsdzField &&\n            usdzField\n        }\n        <button type=\"submit\" className=\"btn btn-warning mt-3\" disabled={!isURL(props.url)}>Submit</button>\n        </form>\n    )\n};\n\nexport default Form;","import React, { useEffect, useRef, useState } from 'react';\nimport { isURL } from './Utils';\nimport '@google/model-viewer/dist/model-viewer';\n\nconst EntityViewer = (props) => {\n    const modelViewerRef = useRef();\n    const [loadError, setLoadError] = useState(false);\n    useEffect(() => {\n        if (modelViewerRef.current !== undefined) {\n            modelViewerRef.current.addEventListener('error', (evt) => {\n                setLoadError(true);\n            });\n        }\n    });\n    const content = (\n        <div className=\"col-12\">\n            {\n                loadError &&\n                    <div class=\"alert alert-danger\" role=\"alert\">Only support glb/glTF files</div>\n            }\n            <div className=\"model-viewer-box\">\n                <model-viewer ref={modelViewerRef} class=\"model-viewer\" src={`${props.url}`} auto-rotate camera-controls ar ar-scale=\"auto\" alt=\"model\" ios-src={`${props.usdz}`} />\n            </div>\n        </div>\n        \n    );\n    return (\n        <div className=\"row mt-2\">\n        {\n            isURL(props.url) &&\n                content\n        }\n        </div>\n    );\n};\n\nexport default EntityViewer;","import React, { useState } from 'react';\nimport { isURL, getUSDZ, getGithubRawURL, getParameterByName } from './Utils';\nimport Form from './Form';\nimport EntityViewer from './EntityViewer';\n//import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  var para = getParameterByName(\"model\");\n  if (para !== null) {\n    para = getGithubRawURL(para);\n  }\n  var paraIsRealityFile = getParameterByName(\"isRealityFile\");\n  if (paraIsRealityFile !== null) {\n    paraIsRealityFile = (paraIsRealityFile === \"true\");\n  }\n  const [model, setModel] = useState(`${para}`);\n  const [submittedModel, setSubmittedModel] = useState(`${para}`);\n  const [usdz, setUsdz] = React.useState(`${(para === null) ? \"null\" : getUSDZ(para, paraIsRealityFile)}`);\n  const [submittedUsdz, setSubmittedUsdz] = useState(`${(para === null) ? \"null\" : getUSDZ(para, paraIsRealityFile)}`);\n  const [isRealityFile, setIsRealityFile] = useState(paraIsRealityFile);\n  const [enableUsdzField, setEnableUsdzField] = useState(false);\n  //console.log(`url: ${getParameterByName(\"model\")}`);\n\n  const handleIsRealityFileChange = (event) => {\n    setIsRealityFile(event.target.checked);\n  }\n\n  const handleUsdzCheckboxChange = (evt) => {\n    setEnableUsdzField(evt.target.checked);\n  }\n  \n  const handleChange = (evt) => {\n    setModel(`${evt.target.value}`);\n  }\n  \n  const handleUsdzFieldChange = (evt) => {\n    setUsdz(`${evt.target.value}`);\n  }\n  \n  const handleSubmit = (evt) => {\n    // handle submit\n    const m = getGithubRawURL(model);\n    setSubmittedModel(m);\n    if (enableUsdzField && isURL(usdz)) {\n      // use specified usdz location\n      setSubmittedUsdz(`${getUSDZ(getGithubRawURL(usdz), isRealityFile)}`);\n    } else {\n      setSubmittedUsdz(`${getUSDZ(m, isRealityFile)}`);\n    }\n    window.location.href = `${window.location.origin}${window.location.pathname}?model=${m}&isRealityFile=${isRealityFile}`;\n    evt.preventDefault();\n  }\n\n  return (\n    <div className=\"App container mt-2\">\n      <Form onChange={handleChange} url={model} onSubmit={handleSubmit} onUsdzCheckboxChange={handleUsdzCheckboxChange} enableUsdzField={enableUsdzField} onUsdzFieldChange={handleUsdzFieldChange} isRealityFile={isRealityFile} onRealityCheckboxChange={handleIsRealityFileChange} />\n      <EntityViewer url={submittedModel} usdz={submittedUsdz} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <div className=\"container d-flex justify-content-center align-items-center \">\n            © {new Date().getFullYear()} Ken-Jung Lee\n        </div>\n    )\n}\n\nexport default Footer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Footer from './Footer';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Footer />, document.getElementById('footer'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}