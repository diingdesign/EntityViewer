{"version":3,"sources":["LocalUploader.js","serviceWorker.js","index.js"],"names":["LocalUploader","React","useState","file","setFile","usdz","setUsdz","enableiOS","setEnableiOS","loadError","setLoadError","modelViewerRef","useRef","handleFileChange","files","f","url","window","URL","createObjectURL","test","name","undefined","useEffect","current","addEventListener","evt","console","log","detail","type","className","for","accept","id","onChange","e","target","value","aria-label","checked","role","class","src","ar","auto-rotate","camera-controls","ios-src","ref","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yNAyFeA,G,YArFO,WAAO,IAAD,EACFC,IAAMC,WADJ,mBACnBC,EADmB,KACbC,EADa,OAEFH,IAAMC,WAFJ,mBAEnBG,EAFmB,KAEbC,EAFa,OAGQL,IAAMC,UAAS,GAHvB,mBAGnBK,EAHmB,KAGRC,EAHQ,OAIQP,IAAMC,UAAS,GAJvB,mBAInBO,EAJmB,KAIRC,EAJQ,KAMpBC,EAAiBV,IAAMW,SAEvBC,EAAmB,SAACC,GACxBJ,GAAa,GACb,IAAMK,EAAID,EAAM,GACVE,EAAMC,OAAOC,IAAIC,gBAAgBJ,GACnB,kBAEJK,KAAKL,EAAEM,MAErBjB,EAAQY,GAHU,cAIGI,KAAKL,EAAEM,OAE5Bf,EAAQU,QACKM,IAATnB,GACFC,EAAQY,IAIVN,GAAa,IAejB,OAPAT,IAAMsB,WAAU,WACdZ,EAAea,QAAQC,iBAAiB,SAAS,SAACC,GAChDC,QAAQC,IAAR,+BAAoCF,EAAIG,OAAOC,OAC/CpB,GAAa,SAKf,yBAAKqB,UAAU,sBACX,0BAAMA,UAAU,OACZ,yBAAKA,UAAU,mCACX,2BAAOC,IAAI,kBAAX,0BACA,2BAAOF,KAAK,OAAOG,OAAO,aAAaF,UAAU,oBAAoBG,GAAG,iBAAiBb,KAAK,iBAAiBc,SAAU,SAACC,GACtHvB,EAAiBuB,EAAEC,OAAOvB,WAGlC,yBAAKiB,UAAU,wBACX,yBAAKA,UAAU,mBACX,2BAAOD,KAAK,WAAWC,UAAU,mBAAmBG,GAAG,aAAab,KAAK,aAAaiB,MAAM,aAAaC,aAAW,+BAA+BJ,SAtBrI,SAACT,GAC7BlB,EAAakB,EAAIW,OAAOG,YAsBV,2BAAOT,UAAU,mBAAmBC,IAAI,cAAxC,0BAGAzB,GACI,yBAAKwB,UAAU,cACX,2BAAOC,IAAI,iBAAX,sBACA,2BAAOF,KAAK,OAAOG,OAAO,QAAQF,UAAU,oBAAoBG,GAAG,gBAAgBb,KAAK,gBAAgBc,SAAU,SAACC,GAC/GvB,EAAiBuB,EAAEC,OAAOvB,aAS9CL,GACI,yBAAKsB,UAAU,OACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,qBAAqBU,KAAK,SAAzC,2CAKhB,yBAAKV,UAAU,OACX,yBAAKA,UAAU,2BACf,kCAAcW,MAAM,eAAeC,IAAKxC,EAAMyC,IAAE,EAACC,eAAA,EAAYC,mBAAA,EAAgBC,UAAS1C,EAAM2C,IAAKrC,SCtEzFsC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAmBC,SAASC,eAAe,SD4HrD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.24b43ba1.chunk.js","sourcesContent":["import React from 'react';\nimport '@google/model-viewer/dist/model-viewer';\nimport './App.css';\n\nconst LocalUploader = () => {\n  const [file, setFile] = React.useState();\n  const [usdz, setUsdz] = React.useState();\n  const [enableiOS, setEnableiOS] = React.useState(false);\n  const [loadError, setLoadError] = React.useState(false);\n  \n  const modelViewerRef = React.useRef();\n  \n  const handleFileChange = (files) => {\n    setLoadError(false);\n    const f = files[0];\n    const url = window.URL.createObjectURL(f);\n    const gltfFileReg = /\\.(gltf|glb)$/gi;\n    const usdzFileReg = /\\.(usdz)$/gi;\n    if (gltfFileReg.test(f.name)) {\n      // gltf file\n      setFile(url);\n    } else if (usdzFileReg.test(f.name)) {\n      // usdz file\n      setUsdz(url);\n      if (file === undefined) {\n        setFile(url)\n      }\n        \n    } else {\n      setLoadError(true);\n    }\n  };\n\n  const handleIOSCheckboxChange = (evt) => {\n      setEnableiOS(evt.target.checked);\n  };\n  \n  React.useEffect(() => {\n    modelViewerRef.current.addEventListener('error', (evt) => {\n      console.log(`Loading model error: ${evt.detail.type}`);\n      setLoadError(true);\n    });\n  });\n  \n  return (\n    <div className=\"App container mt-3\">\n        <form className=\"row\">\n            <div className=\"form-group col-12 col-sm-6 mb-4\">\n                <label for=\"modelFileInput\">Select a glb/glTF file</label>\n                <input type=\"file\" accept=\".glb,.gltf\" className=\"form-control-file\" id=\"modelFileInput\" name=\"modelFileInput\" onChange={(e) => {\n                    handleFileChange(e.target.files);\n                }} />\n            </div>\n            <div className=\"col-12 col-sm-6 mb-4\">\n                <div className=\"form-check mb-2\">\n                    <input type=\"checkbox\" className=\"form-check-input\" id=\"enableUsdz\" name=\"enableUsdz\" value=\"enableUsdz\" aria-label=\"Checkbox for enabling iOS AR\" onChange={handleIOSCheckboxChange} />\n                    <label className=\"form-check-label\" for=\"enableUsdz\">Enable iOS AR feature</label>\n                </div>\n                {\n                    enableiOS && (\n                        <div className=\"form-group\">\n                            <label for=\"usdzFileInput\">Select a USDZ file</label>\n                            <input type=\"file\" accept=\".usdz\" className=\"form-control-file\" id=\"usdzFileInput\" name=\"usdzFileInput\" onChange={(e) => {\n                                handleFileChange(e.target.files);\n                            }} />\n                        </div>\n                    )\n                }\n            </div>\n            \n        </form>\n        {\n            loadError && (\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <div className=\"alert alert-danger\" role=\"alert\">Only glb or gltf files are supported.</div>\n                    </div>\n                </div>\n            )\n        }\n        <div className=\"row\">\n            <div className=\"model-viewer-box col-12\">\n            <model-viewer class=\"model-viewer\" src={file} ar auto-rotate camera-controls ios-src={usdz} ref={modelViewerRef} />\n            </div>\n        </div>\n    </div>\n  )\n};\n\nexport default LocalUploader;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport LocalUploader from './LocalUploader';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<LocalUploader />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}